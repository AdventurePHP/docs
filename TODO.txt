TODO neue Seite:
~~~~~~~~~~~~~~~~

- [OK] http://de.sevenload.com/videos/MrwrTXx-PHPLondon-Agavi-2008-08-07 im Literatur-Zeug verlinken.
       Zieht über ZF & Co her, und zeigt einige nette Fehler auf.
       -> In Artikel-Liste aufgenommen

- [OK] Dokumentation- und Tutorial-Übersicht erstellen.

- [OK] Seite im SVN verfügbar machen.

- [OK] Quicknavi umbauen, dass APF-Tags geparst werden.

- [OK] Quicknavi von Downloads erweitern, dass eine Übersicht über die Releases angezeigt wird.

- [OK] Boxen auf Startseite füllen.

- [OK] Boxen auf Startseite sprachabhängig gestalten.

- [OK] Seite "Quickstart" aufbauen.

- [OK] Seite "Sandbox" aufbauen.

- [OK] Seite "Security" aufbauen.

- [OK] Suche umbauen, dass diese Seiten-abhängig und kein Modul mehr ist, da zu viele Abhängigkeiten
       drin verbaut sind.

- [OK] Kontaktformular mit CAPTCHA versehen.

- [OK] "Latest entries" aus Forum lesen.

- Migration der Kommentarfunktion auf neue Keys mit denen eine Referenz auf die Kommentare erzeugt
  werden kann. Hierzu sollte die ID der Seite in den Key aufgenommen werden. Wichtig ist, dass eine
  Migration der Livedaten möglich ist
  - [OK] Datenbank-Mapping erzeugen.
  - [OK] Content-Dateien überarbeiten
  - Migration der Live-Kommentare

- [OK] Bugfix im frontcontrollerRequestFilter. Hier wurde ein Params-array nicht initialisiert, sofern
       keine Input-Params gegeben wurden.

- [OK] tools::http HeaderManager hinzugefügt

- [OK] Bugfix im comment Modul: Abhängigkeit zum sessionManager wird nun aufgelöst. Änderung der URL
       für das CAPTCHA-Bild.

- [OK] Literatur-Seite anpassen / überarbeiten und neue Links (Forum + oben) hinzufügen.

- [OK] Thema "Roadmap" präsenter in die Seite bringen

- [OK] file:highlight aus der Doku verbannen, da diese bei der CSS-Formatierung Probleme macht!

- [OK] Statistik als posttransform-Action implementieren. Anmerkung: Lösung ist jedoch leider nicht
       allgemeingültig. Hier sollte man das modul webstat mal überarbeiten.

- [OK] Struktur der Domains aufbauen:
       - de.adventure-php-framework.org -> deutsche Seite
       - en.adventure-php-framewoork.org -> englische Seite
       - media.adventure-php-framework.org -> Bilder, ...
       - files.adventure-php-framework.org -> Downloads
       - sandbox.adventure-php-framework.org -> Sandbox

- Englische Übersetzung von
  - [OK] Sandbox
  - [OK] Quickstart
  - [OK] Security

- [OK] Überarbeiten der Quicknavi-Dateien

- [OK] Comment und Ranking farblich anpassen

- [OK] fulltextsearch mit Synonym-Funktion ausstatten. Dabei Such-Logs auswerten und Synonymliste erstellen!

- [OK] Bisherige Startseite zu News-Seite umfunktionieren

- Bildchen ber das timing model des pagecontrollers malen (wie frontcontroller!) und in das Tutorial
  "Taglib erstellen" einbinden, dass man versteht, warum der pc erst den documentcontroller ausführt
  und dann die Kinder transformiert.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DESIGN-TODOs:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Test in Quicknavi-Box formatieren:
  - der Text sollte nicht am Rand kleben.
  - Links sollten die selbe Schriftgröße wie der Text haben
  - Die Liste der auf der Seite gefundenen Überschriften sollte sich "schön" in das Bild gliedern

- Menü bricht im englischen um

- Darstellung im IE fehlerhaft

- Box "News" (rechts) mit der Box "Hinweis der Woche" (links) tauschen. Tab "News" auf der linken
  Seite aktiv setzen.

- favicon erstellen

- Formatierung der Boxen auf der Startseite (Text überlappt, bzw. wird bis an den äußeren Rand angezeigt)

- HTML-Elemente (Listen, ...) formatieren.

- Schriftgrad anpassen

- Browser-Kompatibilität sicherstellen.

- favicon erstellen.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Release 1.8:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- [OK] "Behind the site"-Artikel schreiben

- [OK] bbCodeParser überarbeiten. Siehe hierzu auch
       http://forum.adventure-php-framework.org/de/viewtopic.php?f=5&t=55

  Ideen:
    - Parse-Operationen können konfiguriert werden.
    - Extensions werden über Provider geregelt.
    - Es gibt unterschiedliche Parser, die bereits enthalten sind.
    - Extensions können über Namespaces hinzugefüht werden (API-Methoden) bei Verwendung!

- [CD] Explizites Schließen der DB-Verbindungen für connectionManager implementieren.
       --> canceled, weil zu kompliziert. Man müsste in jedem Service-Objekt noch einen zusätzlichen
           Parameter einführen, ob sich das Objekt bei einem Destruktor-Service für DB-Connections
           registrieren möchte und dann eine Referenz auf diejenigen Objekte verwalten.

- [OK] AdvancedLogger implementieren, den man konfigurieren kann.

- [OK] Artikel über "view based caching"

- [OK] Artikel für RSS-Ausgabe.

- [OK] Media-Stream-Tag basteln und dokumentieren.

- [OK] Mehrsprachige Templates gemäß Fliegermichl als Modul implementieren.
  -> warten auf Feedback im Forum, da Implementierung anderes als geplant umgesetzt wurde

- [OK] Implementierung neuer CacheManager

- [OK] Redesign filesystemHandler

- [CD] Kalender-Modul optimieren, dokumentieren und ausliefern

- [OK] Tutorial für die RSS-Ausgabe von bestehenden Seiten.

- [OK] Rollout mit dem selben FeatureSet / derselben Ankündigung. Aber: Bugfixes des GenericORMappers
  inkludieren.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Release 1.9:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Doku-Updates:
  - [OK] form_taglib_select: setOption2Selected() erklären
  - [OK] GenericDomainObject: getRelatedObjects() erklären
  - [OK] FrontController: getInput() / $this->__Input aufzeigen

- [OK] Request- und Response-Filter über die Registry konfigurierbar machen.

- [OK] Filter für Form-Felder einführen.

- [OK] Erweiterung des <generic:importdesign />-Tags, so dass dieser eine abhängige Action registrieren
  kann.

- [OK] Übersetzung der Startseite der Doku!

- [OK] Erstellung einer Pagecontroller Dokumentation

- Dokumentation für das UserManagement-Modul bauen. Änderungen von fliegermichl einbauen.
  -> [OK] Usermanagement überarbeiten (ZIP von Fliegermichl ansehen)
  -> [OK] Business-Komponente dokumentieren
  -> [OK] Beispiel basteln, das den Einsatz zeigt
  -> [OK] Übersetzen

- [OK] Übersetzung der GenericORMapper-Doku

- [OK] Dokumentation RequestHandler

- [OK] CookieManager basteln (sowie sessionManager)! -> neue Roadmap aufzeigen

- [OK] Typische Fehlermeldungen aufzeigen (Forum-FAQs):
  - "#1109 - Unknown table 'ent_xyz' in on clause": Beziehung in einem Criterion-Objekt ist falsch
    definiert worden. Beispiel:

         $crit->addRelationIndicator('Application2Role',$app);
         return $oRM->loadNotRelatedObjects($role,'Role2User',$crit);

    Hier sollte eigentlich _Benutzer_ geladen werden, deren Rolle der aktuellen Applikation angehört,
    also:

         $crit->addRelationIndicator('Application2User',$app);
         return $oRM->loadNotRelatedObjects($role,'Role2User',$crit);

  - "Undefined index: " in Kombination mit "Undefined index: Role2PermissionSet" und einem Statement-Fehler
    tritt dann auf, wenn der Mapper SessionSingleton erzeugt wurde und in den Konfigurationsdateien
    eine Änderung während der Session auftritt. Hier hilft einfach ein Löschen bzw. Neuanlegen der
    Session.

- [OK] FAQ-Übersicht aus Forum als Tag in die Seite integrieren.

- [OK] Verfügbare API-Dokumentationen auf der API-Doku-Seite listen.

- [OK] OR-Mapper-Setup: statt "UserID INT(5) NOT NULL auto_increment" nun "UserID UNSIGNED INT(5) NOT NULL auto_increment"
  im setup statement ausgeben.

- [OK] Seite über Fehlerbehandlung im APF (trigger_error-> errorManager, ...) schreiben und Behandlung
  von Fehlern über Registry konfigurierbar machen (eigenen ErrorManager!).

- [OK] Umbau der aktuellen Seite, dass Inhalte direkt kopiert werden können (fast alle!)

- [OK] Performance-Messung gegenüber http://www.yiiframework.com/performance anstellen.

- [OK] Update der ImageManager-Dokumentation!!!

- [OK] Update der FilesystemManager-Doku (wegen getFileAttributes($file,'AttributeName');
       -> Ist mit dem API-Update erledigt!

- [OK] Implementierung "Exception handling"!

- [OK] sites/demosite/pres/templates/menu.html updaten

- [OK] Migrationsartikel für 1.8 -> 1.9 schreiben:
  - variablenHandler -> RequestHandler (search & replace)
  - filesystemHandler -> FilesystemManager
  - Pager: neue Konfigurationsparameter, externe Params werden nun bei loadEntries() und
    loadEntriesByAppDataComponent() und getPager() mitgegeben!
  - imageManager -> ImageManager + Änderungen der API!

- [OK] Umbenennen einiger Komponenten und Klassen (imageManager -> ImageManager schon passiert)

- [OK] Ankündigungsdateien für Webseite und Presse schreiben

- [OK] Bugfix für MySQLHandler + Logger

- [OK] Update:
  - content.css (neu)
  - demo.css (alt)
  - menu.html


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Release 1.10:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Newsletter-Anmeldung für Developer-News

- [OK] Branches für PHP4/5 und jeweils für 1.10 erstellen und php-Kompatibilitätsdateien aufräumen

- [OK] import()-Funktionen bereinigen

- private/protected einführen

- static einführen

- final einführen

- abstract einführen (coreObject, ...)

- [OK] Gästebuch auf ConnectionManager umstellen, damit keine Konflikte in der Konfiguration entstehen.

- Doku-Update für neue Gästebuch-Implementierung!

- [OK] Statistik-Tool (FC-Action der neuen Seite) in die alte integrieren

- [OK] Sprachumschalter der alten Seite von der Language-Action befreien - geht nun auch so!

- PHP-4-Backport-Script schreiben um die Pflege nur noch im PHP-5-Zweig betreiben zu müssen.

- [CD] Evaluieren, wie man mit doxygen saubere Namespace Dokus bekommt! -> Stichwort: Auslagerung der
  Package-Informationen + Update der Doku.
  -> Zur Hälfte abgeschlossen: Man muss diese auslagern, sauber dokumentieren und als erste zu
     parsende Datei in der config einbinden.
  -> Namespaces wurden aus der Doku entfernt.

- Formular-Dokumentation erweitern: Beispiel für Validator-Gruppen-Tags.

- Erweiterung des HeaderManagers, dass dieser wie die phpCube-Komponente die richtigen Cache-Header
  sendet. Stichwort: session_cache_limiter('none')!

- Neue Features für den OR-Mapper
  - Wenn bei saveObject() ein weiterer Parameter gesetzt ist, werden nicht im Baum abgebildete
    Assoziationen gelöscht. So kann man eine saubere Bearbeitung machen. Wichtig beim Editieren
    eines PermissionSet's!

- Neue Komponente DIServiceManager, der dependency injection abbilden kann (config-files). Zusätzlich
  soll dieser eine DI-Komponente noch mit weiteren Komponenten initialisieren können (z.B.
  Datenbank-Verbindungen und weiteren Service-Objekten)

  Aufbau:

     1. Konfigurationsdateien für Initializer (method injection):
        [dbconn]
        method = "initDBConnection"
        serviceobject = "ServiceObjectB" ; may eventually not have an initializer
                                         ; to avoid circular dependencies


     2. Konfiguration für Service-Objekte
        [ServiceObjectA]
        servicetype = "SINGLETON|SESSIONSINGLETON|NORMAL"
        namespace = "path::to::my::service::layer::component"
        class = "SampleServiceLayer"
        initializer = "dbconn;foo"
        initparam = "" ; optional static init param, that can be applied to the initDefault() method


     3. DIServiceManager
        // wird wie üblich mit context + environment addressiert
        $serviceObject = &$this->__getDIServiceObject('namespace::to::configuration','config_name');


- Artikel über Baumstrukturen mit ParentID-Beziehung schreiben und evtl. eine Komponente bereitstellen
  - Methoden vorhalten wie
    - expandTo()
    - additionallyExpandTo()
  - Verwaltung der aufgeplappten Elemente in einer Session
  - Rekursives Laden
  - Sortieren von Knoten innerhalb einer Ebene
  - Generische Attribute eines Knotens über den GenericORMapper

- GenericORMapper-Beispiel-Applikation implementieren und dokumentieren (Blog-Beispiel in mehreren Akten)
  -> http://www.symfony-project.org/tutorial/1_2/my-first-project

- Mehrfache Validierung für Formularfelder einführen. Validatoren können dann in der Form

  validator="Text|EMail"

  oder

  validator="Text|myownvalidator:validateUsername"

  definiert werden. Letzteres bedeutet, dass eigene Validator-Klassen verwendet werden sollen. Diese
  müssen natürlich vorher eingebunden werden. Hierzu könnte evtl. mit einem neuen Attribut
  validator_class="" gearbeitet werden. Alternativ dazu muss die neue Klasse einfach in der index.php
  eingebunden werden. Weitere Alternative ist ein Tag, das einen weiteren Validator einbindet oder
  als Validator hinzufügt. Hierzu müsste der Tag jedoch als erstes geparst werden.

  Alternative:
  --> validator="bla1|bla2|bla3" validatorclass="path::to::my::class|ClassName" wie beim filter.

  Noch bessere Alternative:
  --> siehe http://forum.adventure-php-framework.org/de/viewtopic.php?f=5&t=86#p479
      Dies könnte man u.U. auch für die Filter nutzen. Hierzu müsste jedoch jedes der Formular-Objekte
      zukünftig einen Validierungsstatus und einen Filter-Kram kennen, den man in einer eigenen
      protected Methode ausführen kann.

- Redesign dateTimeManager (evlt. auch canceln!) -> mit Alex besprechen. Vielleicht ist das für sein
  Projekt interessant und man kann da was zusammen machen (Stichwort: Internationalisierung von Datum
  und Währung)

- http://www.sitepoint.com/blogs/2008/08/29/rasmus-lerdorf-php-frameworks-think-again/ verlinken

Text zum posten:
----------------------------------------------------------------------------------------------------
Hello David,

thank you for the article so much. I was glad to hear, that I am not the only person on this planet, that thinks that performance is one of the major features of a framework. Recently we re-performed a RPS benchmark and it is in fact surpising, how many frameworks have bad performance. On http://adventure-php-framework.org/Page/103-Yii-vs-apf you can see some of the results and an analysis of the test.

Personally, I think, that developers still believe caches to be the only way to make things fast. But as you - well rasmus - mentioned in the article, this is neither green nore a good scaling base for your infrastructure.

Cheers,
Christian
----------------------------------------------------------------------------------------------------

http://www.slideshare.net/arnoschn/rasmus-think-again-agile-framework-happy-php-developer-presentation-625122